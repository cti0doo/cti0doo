"id","name","code","appears_on_payslip","category_id","register_id","amount_select","condition_select","note","amount_fix","condition_range_max","condition_range_min","amount_percentage","amount_percentage_base","amount_python_compute","condition_python","struct_id","quantity","condition_range","sequence","account_credit/id","account_debit/id"
"l10n_co_hr_payroll.hr_salary_rule_DAYS","Days","DAYS","FALSE","Quotation Base Index","Employee","Python Code","Always True","Days",0,0,0,0,,"total = 0
date_end = strptime('01/01/2019', '%m/%d/%Y')
date_end = payslip.date_to
day_end = int(date_end.day)
tdate_start = strptime('01/01/2019', '%m/%d/%Y')
date_start = payslip.date_from
day_start = int(date_start.day)
day_end = day_end if day_end  < 28  else 30
total = day_end  - day_start + 1
result = total / 30","
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10","Payroll",1,"contract.wage",0,,
"l10n_co_hr_payroll.hr_salary_rule_SMMLV","Minimun Salary","SMMLV","FALSE","Quotation Base Index","Employee","Python Code","Python Expression","Minimun Monthly Legal Salary ",0,0,0,0,,"result = payslip.rule_parameter('SMMLV')","total = 0
total = payslip.rule_parameter('SMMLV') if payslip.rule_parameter('SMMLV') else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",0,,
"l10n_co_hr_payroll.hr_salary_rule_UVT","Unit Value Tax","UVT","FALSE","Quotation Base Index","Employee","Python Code","Python Expression","Unit Value Tax",0,0,0,0,,"result = payslip.rule_parameter('UVT')","total = 0
total = payslip.rule_parameter('UVT') if payslip.rule_parameter('UVT') else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",0,,
"l10n_co_hr_payroll.hr_salary_rule_BASIC","Basic Salary","BASIC","FALSE","Quotation Base Index","Employee","Python Code","Always True","Basic Salary",0,0,0,0,,"result = contract.wage * DAYS","
 # Available variables:
 #----------------------
 # payslip: object containing the payslips
 # employee: hr.employee object
 # contract: hr.contract object
 # rules: object containing the rules code (previously computed)
 # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
 # worked_days: object containing the computed worked days
 # inputs: object containing the computed inputs

 # Note: returned value have to be set in the variable 'result'

 result = rules.NET > categories.NET * 0.10","Payroll",1,"contract.wage",10,,
"l10n_co_hr_payroll.hr_salary_rule_INT_SAL","Integral Salary","INT_SAL","TRUE","Income","Employee","Python Code","Python Expression","Integral Salary",0,0,0,0,,"result_qty = worked_days.WORK100.number_of_days
result_rate = 100
result =  BASIC / total","total = 0
for days in payslip.worked_days_line_ids.filtered(lambda x: x.number_of_days > 0):
 total += days.number_of_days
result = total if contract.integral else 0","Payroll",1,"contract.wage",11,"account.3_co_puc_250505","account.3_co_puc_510506"
"l10n_co_hr_payroll.hr_salary_rule_MAT","Maternity License","MAT","TRUE","Income","Employee","Python Code","Python Expression","Maternity License",0,0,0,0,,"result_qty = worked_days.MAT.number_of_days
result_rate = 100
result =  BASIC / total","total = 0
for days in payslip.worked_days_line_ids.filtered(lambda x: x.number_of_days > 0):
 total += days.number_of_days
result = worked_days.MAT.number_of_days if worked_days.MAT and worked_days.MAT.number_of_days else 0","Payroll",1,"contract.wage",11,"account.3_co_puc_250505","account.3_co_puc_510503"
"l10n_co_hr_payroll.hr_salary_rule_PAI_LEA","Paid Leave","PAI_LEA","TRUE","Income","Employee","Python Code","Python Expression","Paid Leave",0,0,0,0,,"
result_qty  = worked_days.PAI_LEA.number_of_days
result_rate = 100
result += contract.wage / 30","worked_days.PAI_LEA","Payroll",1,"contract.wage",11,"account.3_co_puc_250505","account.3_co_puc_136095"
"l10n_co_hr_payroll.hr_salary_rule_BAS_SAL","Salary","BAS_SAL","TRUE","Income","Employee","Python Code","Python Expression",,0,0,0,0,,"result_qty = worked_days.WORK100.number_of_days
result_rate = 100
result =  BASIC / total","total = 0
for days in payslip.worked_days_line_ids.filtered(lambda x: x.number_of_days > 0):
 total += days.number_of_days
result = total if not contract.integral else 0","Payroll",1,"contract.wage",11,"account.3_co_puc_250505","account.3_co_puc_510539"
"l10n_co_hr_payroll.hr_salary_rule_SAL_ADJ","Salary Adjust","SAL_ADJ","TRUE","Income","Employee","Python Code","Python Expression","Salary Adjust",0,0,0,0,,"result = inputs.SAL_ADJ.amount","inputs.SAL_ADJ","Payroll",1,"contract.wage",11,"account.3_co_puc_250505","account.3_co_puc_510506"
"l10n_co_hr_payroll.hr_salary_rule_UNI_PER","Union Permit","UNI_PER","TRUE","Income","Employee","Python Code","Python Expression","Union Permit",0,0,0,0,,"result = round(( contract.wage / 30 ) * worked_days.UNI_PER.number_of_days, 0)","worked_days.UNI_PER","Payroll",1,"contract.wage",11,"account.3_co_puc_250505","account.3_co_puc_510506"
"l10n_co_hr_payroll.hr_salary_rule_VAC","Vacations","VAC","TRUE","Income","Employee","Python Code","Python Expression","Vacations",0,0,0,0,,"result_qty = worked_days.VAC.number_of_days
result_rate = 100
result =  BASIC / total","total = 0
for days in payslip.worked_days_line_ids.filtered(lambda x: x.number_of_days > 0):
 total += days.number_of_days
result = worked_days.VAC.number_of_days if worked_days.VAC and worked_days.VAC.number_of_days else 0","Payroll",1,"contract.wage",11,"account.3_co_puc_250505","account.3_co_puc_510506"
"l10n_co_hr_payroll.hr_salary_rule_EDT","Extra Day Time","EDT","TRUE","Income","Employee","Python Code","Python Expression","Extra Day Time",0,0,0,0,,"result_qty  = total
result_rate = 125
result = contract.wage / 240","total = 0
total = inputs.EDT.amount if inputs.EDT and inputs.EDT.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",13,"account.3_co_puc_250505","account.3_co_puc_510515"
"l10n_co_hr_payroll.hr_salary_rule_EDT_SH","Extra Day Time Dominical And Hollidays","EDT_SH","TRUE","Income","Employee","Python Code","Python Expression","Extra Day Time Dominical And Hollidays",0,0,0,0,,"result_qty  = inputs.EDT_SH.amount
result_rate = 200
result = contract.wage / 240","total = 0
total = inputs.EDT_SH.amount if inputs.EDT_SH and inputs.EDT_SH.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",13,"account.3_co_puc_250505","account.3_co_puc_510515"
"l10n_co_hr_payroll.hr_salary_rule_ENT","Extra Night Time","ENT","TRUE","Income","Employee","Python Code","Python Expression","Extra Night Time",0,0,0,0,,"result_qty  = inputs.ENT.amount
result_rate = 175
result = contract.wage / 240","total = 0
total = inputs.ENT.amount if inputs.ENT and inputs.ENT.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",13,"account.3_co_puc_250505","account.3_co_puc_510515"
"l10n_co_hr_payroll.hr_salary_rule_ENT_SH","Extra Night Time Domincal And Hollidays","ENT_SH","TRUE","Income","Employee","Python Code","Python Expression","Extra Night Time Domincal And Hollidays",0,0,0,0,,"result_qty  = inputs.ENT_SH.amount
result_rate = 250
result = contract.wage / 240","total = 0
total = inputs.ENT_SH.amount if inputs.ENT_SH and inputs.ENT_SH.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",13,"account.3_co_puc_250505","account.3_co_puc_510518"
"l10n_co_hr_payroll.hr_salary_rule_NS","Night Surcharge","NS","TRUE","Income","Employee","Python Code","Python Expression","Night Surcharge",0,0,0,0,,"result_qty  = inputs.NS.amount
result_rate = 35
result = contract.wage / 240","total = 0
total = inputs.SH.amount if inputs.SH and inputs.SH.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",13,"account.3_co_puc_250505","account.3_co_puc_136095"
"l10n_co_hr_payroll.hr_salary_rule_COM","Commissions","COM","TRUE","Income","Employee","Python Code","Python Expression","Commissions",0,0,0,0,,"result_qty = 1
result_rate = inputs.COM.amount * 100 if inputs.COM.amount > 0 and inputs.COM.amount < 1 else 100
result = categories.INC if inputs.COMamount > 0 and inputs.COM.amount < 0 else inputs.COM.amount","total = 0
total = inputs.COM.amount if inputs.COM and  inputs.COM.amount > 0 else 0
result = total","Payroll",1,"contract.wage",14,"account.3_co_puc_250505","account.3_co_puc_136095"
"l10n_co_hr_payroll.hr_salary_rule_ARL_INA","ARL Inability","ARL_INA","TRUE","Income","Employee","Python Code","Python Expression","Professional Risk Inability ",0,0,0,0,,"result_qty = worked_days.ARL_INA.number_of_days
result_rate = 100
result = round(contract.wage / 30, 0)","worked_days.ARL_INA ","Payroll",1,"contract.wage",15,"account.3_co_puc_250505","account.3_co_puc_136095"
"l10n_co_hr_payroll.hr_salary_rule_EPS_INA","EPS Inability","EPS_INA","TRUE","Income","Employee","Python Code","Python Expression","Health Inability",0,0,0,0,,"result_qty = worked_days.LEAVE110.number_of_days
result_rate = ( contract.wage * 0.6667 > SMMLV) and  33.33  or  100 - ( 100 * SMMLV / contract.wage)
result = contract.wage /total","total = 0
for days in payslip.worked_days_line_ids.filtered(lambda x: x.number_of_days > 0):
 total += days.number_of_days
result = worked_days.LEAVE110.number_of_days if worked_days.LEAVE110 and worked_days.LEAVE110.number_of_days else 0","Payroll",1,"contract.wage",15,"account.3_co_puc_250505","account.3_co_puc_510515"
"l10n_co_hr_payroll.hr_salary_rule_EPS_INA_180","EPS Inability > 180 Days","EPS_INA_180","TRUE","Income","Employee","Python Code","Python Expression","Health Inability > 180 Days",0,0,0,0,,"result_qty = worked_days.EPS_INA_180.number_of_days
result_rate = ( contract.wage * 0.5 > SMMLV) and  50.00  or  ( 100 - (100 * contract.wage / SMMLV))
result = contract.wage /30","worked_days.EPS_INA_180","Payroll",1,"contract.wage",15,"account.3_co_puc_250505","account.3_co_puc_136095"
"l10n_co_hr_payroll.hr_salary_rule_EPS_INA_180_SUB","EPS Inability > 180 Days Subsidy","EPS_INA_180_SUB","TRUE","Income","Employee","Python Code","Python Expression","Health Inability > 180 Days Subsidy",0,0,0,0,,"result_qty = worked_days.EPS_INA_180.number_of_days
result_rate = ( contract.wage * 0.5 > SMMLV) and  50.00  or  ( 100 - (100 * contract.wage / SMMLV))
result = contract.wage /30     ","worked_days.EPS_INA_180","Payroll",1,"contract.wage",15,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_EPS_INA_SUB","EPS Inability Subsidy","EPS_INA_SUB","TRUE","Income","Employee","Python Code","Python Expression","Health Inability Subsidy",0,0,0,0,,"result_qty = worked_days.EPS_INA.number_of_days
result_rate = ( contract.wage * 0.6667 > SMMLV) and  33.33  or  ( 100 - (100 * contract.wage / SMMLV))
result = contract.wage /30","worked_days.EPS_INA","Payroll",1,"contract.wage",15,,
"l10n_co_hr_payroll.hr_salary_rule_EPS_PER","EPS Permit","EPS_PER","TRUE","Income","Employee","Python Code","Python Expression","Health Permission",0,0,0,0,,"result = round(( contract.wage / 30 ) * worked_days.EPS_PER.number_of_days, 0)","worked_days.EPS_PER","Payroll",1,"contract.wage",15,"account.3_co_puc_250505","account.3_co_puc_510515"
"l10n_co_hr_payroll.hr_salary_rule_LEAVE110","Sick Time Off","LEAVE110","TRUE","Income","Employee","Python Code","Python Expression","Sick Time Off",0,0,0,0,,"result_qty = worked_days.LEAVE110.number_of_days
result_rate = ( contract.wage * 0.6667 > SMMLV) and  66.67  or  ( 100 *  SMMLV / contract.wage)
result = contract.wage /total","total = 0
for days in payslip.worked_days_line_ids.filtered(lambda x: x.number_of_days > 0):
 total += days.number_of_days
result = worked_days.LEAVE110.number_of_days if worked_days.LEAVE110 and worked_days.LEAVE110.number_of_days else 0","Payroll",1,"contract.wage",15,"account.3_co_puc_250505","account.3_co_puc_510515"
"l10n_co_hr_payroll.hr_salary_rule_SH","Sunday And Holidays Surcharge","SH","TRUE","Income","Employee","Python Code","Python Expression","Sunday And Holidays Surcharge",0,0,0,0,,"result_qty = total
result_rate = 75 
result = contract.wage / 240","total = 0
total = inputs.SH.amount if inputs.SH and inputs.SH.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",15,"account.3_co_puc_250505","account.3_co_puc_136095"
"l10n_co_hr_payroll.hr_salary_rule_TOT_INC","Total Income","TOT_INC","TRUE","Total","Employee","Python Code","Always True","Total Income",0,0,0,0,,"result = categories.INC","
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10","Payroll",1,"contract.wage",19,"account.3_co_puc_250505","account.3_co_puc_510527"
"l10n_co_hr_payroll.hr_salary_rule_SUB","Not Salary Subsidy","SUB","TRUE","Other Income","Employee","Python Code","Python Expression","Not Salary Subsidy",0,0,0,0,,"result_qty = 1
result_rate = total * 100 if total >= -1 and total <= 1 else 100
result = categories.INC * total if total >= -1 and total <= 1 else total * DAYS","total = 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'SUB'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.SUB.amount if inputs.SUB and inputs.SUB.amount else total * DAYS
result = total if total != 0 else 0","Payroll",,,21,"account.3_co_puc_250505","account.3_co_puc_510506"
"l10n_co_hr_payroll.hr_salary_rule_TRA_ASI","Transport Assistance","TRA_ASI","TRUE","Other Income","Employee","Python Code","Python Expression","Transport Assistance",0,0,0,0,,"result = payslip.rule_parameter('AT') * DAYS if payslip.rule_parameter('AT') else 0","total = 0
for days in payslip.worked_days_line_ids.filtered(lambda x: x.number_of_days > 0):
 total += days.number_of_days
result = total if (contract.employee_id.km_home_work >= 2) and (( categories.INC / (SMMLV * DAYS) ) <= 2.0) else 0","Payroll",1,"contract.wage",21,"account.3_co_puc_250505","account.3_co_puc_510506"
"l10n_co_hr_payroll.hr_salary_rule_TOT_OTH_INC","Total Other Incomes","TOT_OTH_INC","TRUE","Total","Employee","Python Code","Always True","Total Other Incomes",0,0,0,0,,"result = categories.OTH_INC","total = 0
total = categories.OTH_INC","Payroll",1,"contract.wage",29,,
"l10n_co_hr_payroll.hr_salary_rule_TOT_INC","Total Incomes","TOT_INC","TRUE","Total","Employee","Python Code","Always True","Total Incomes",0,0,0,0,,"result = categories.TOT_INC","total = 0
total = categories.OTH_INC","Payroll",1,"contract.wage",30,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_SAL_ASI","Salary Aid","SAL_ASI","TRUE","Aid","Employee","Python Code","Python Expression","Assistance / Subsidies",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
total = inputs.SAL_ASI.amount if inputs.SAL_ASI and  inputs.SAL_ASI.amount > 0 else 0
result = total","Payroll",1,"contract.wage",31,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_BIR_ASI","Birth Aid","BIR_ASI","TRUE","Aid","Employee","Python Code","Python Expression","Birth Assistance",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
total = inputs.BIR_ASI.amount if inputs.BIR_ASI and  inputs.BIR_ASI.amount > 0 else 0
result = total","Payroll",1,"contract.wage",31,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_BON","Bonus","BON","TRUE","Aid","Employee","Python Code","Python Expression","Bonus",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
total = inputs.BON.amount if inputs.BON and  inputs.BON.amount > 0 else 0
result = total","Payroll",,,31,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_PAR_ASI","Child Educational Aid","PAR_ASI","TRUE","Aid","Employee","Python Code","Python Expression","Child Educational Assistance",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
total = inputs.PAR_ASI.amount if inputs.PAR_ASI and  inputs.PAR_ASI.amount > 0 else 0
result = total","Payroll",1,"contract.wage",31,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_CLO_ASI","Clothe Aid","CLO_ASI","TRUE","Aid","Employee","Python Code","Python Expression","Clothe Assistance",0,0,0,1,"total","
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
total = inputs.CLO_ASI.amount if inputs.CLO_ASI and  inputs.CLO_ASI.amount > 0 else 0
result = total","Payroll",1,"contract.wage",31,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_CON_ASI","Conveyance Aid","CON_ASI","TRUE","Aid","Employee","Python Code","Python Expression","Conveyance Assistance",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
total = inputs.CON_ASI.amount if inputs.CON_ASI and  inputs.CON_ASI.amount > 0 else 0
result = total","Payroll",1,"contract.wage",31,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_DEA_ASI","Death Aid","DEA_ASI","TRUE","Aid","Employee","Python Code","Python Expression","Death Assistance",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
total = inputs.DEA_ASI.amount if inputs.DEA_ASI and  inputs.DEA_ASI.amount > 0 else 0
result = total","Payroll",1,"contract.wage",31,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_EDU_ASI","Educational Aid","EDU_ASI","TRUE","Aid","Employee","Python Code","Python Expression","Educational Assistance",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
total = inputs.EDU_ASI.amount if inputs.EDU_ASI and  inputs.EDU_ASI.amount > 0 else 0
result = total","Payroll",1,"contract.wage",31,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_FED_ASI","Feed Aid","FED_ASI","TRUE","Aid","Employee","Python Code","Python Expression","Feed Assistance",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
total = inputs.FED_ASI.amount if inputs.FED_ASI and  inputs.FED_ASI.amount > 0 else 0
result = total","Payroll",1,"contract.wage",31,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_HOU_ASI","Housing Aid","HOU_ASI","TRUE","Aid","Employee","Python Code","Python Expression","Housing Assistance",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
total = inputs.HOU_ASI.amount if inputs.LAB_LOA_ASI and  inputs.LAB_LOA_ASI.amount > 0 else 0
result = total","Payroll",1,"contract.wage",31,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_LAB_LOA_ASI","Labor Loan Aid","LAB_LOA_ASI","TRUE","Aid","Employee","Python Code","Python Expression","Labor Loan Assistance",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
total = inputs.LAB_LOA_ASI.amount if inputs.LAB_LOA_ASI and  inputs.LAB_LOA_ASI.amount > 0 else 0
result = total","Payroll",1,"contract.wage",31,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_MAI_ASI","Maintenance Aid","MAI_ASI","TRUE","Aid","Employee","Python Code","Python Expression","Maintenance Assistance",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
total = inputs.MAI_ASI.amount if inputs.MAI_ASI and  inputs.MAI_ASI.amount > 0 else 0
result = total","Payroll",1,"contract.wage",31,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_OPT_ASI","Optical Aid","OPT_ASI","TRUE","Aid","Employee","Python Code","Python Expression","Optical Assistance",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
total = inputs.OPT_ASI.amount if inputs.OPT_ASI and  inputs.OPT_ASI.amount > 0 else 0
result = total","Payroll",1,"contract.wage",31,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_OTH_BON","Other Bonus","OTH_BON","TRUE","Aid","Employee","Python Code","Python Expression","Other Bonus",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
total = inputs.OTH_BON.amount if inputs.OTH_BON and  inputs.OTH_BON.amount > 0 else 0
result = total","Payroll",1,"contract.wage",31,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_OTH_ASI","Other Educational Aid","OTH_ASI","TRUE","Aid","Employee","Python Code","Python Expression","Other Educational Assistance",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
total = inputs.OTH_ASI.amount if inputs.OTH_ASI and  inputs.OTH_ASI.amount > 0 else 0
result = total","Payroll",1,"contract.wage",31,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_PRA_ASI","Practitioners","PRA_ASI","TRUE","Subsidy","Employee","Python Code","Python Expression","Practitioners Assistance",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","inputs.PRA_ASI","Payroll",1,"contract.wage",33,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_PRA_TRA_ASI","Practitioners Transport Assistance","PRA_TRA_ASI","TRUE","Other Income","Employee","Python Code","Python Expression","Practitioners Transport Assistance",0,0,0,0,,"result_qty = 1
result_rate = inputs.PRA_TRA_ASI.amount * 100 if inputs.PRA_TRA_ASI.amount > 0 and inputs.PRA_TRA_ASI.amount < 1 else 100
result = categories.INC if inputs.PRA_TRA_ASI.amount > 0 and inputs.PRA_TRA_ASI.amount < 0 else inputs.PRA_TRA_ASI.amount","inputs.PRA_TRA_ASI","Payroll",1,"contract.wage",31,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_PRE_ASI","Prescolar Educational Aid","PRE_ASI","TRUE","Aid","Employee","Python Code","Python Expression","Prescolar Educational Assistance",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
total = inputs.PRE_ASI.amount if inputs.PRE_ASI and  inputs.PRE_ASI.amount > 0 else 0
result = total","Payroll",1,"contract.wage",31,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_PRI_ASI","Primary Educational Aid","PRI_ASI","TRUE","Aid","Employee","Python Code","Python Expression","Primary Educational Assistance",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
total = inputs.PRI_ASI.amount if inputs.PRI_ASI and  inputs.PRI_ASI.amount > 0 else 0
result = total","Payroll",1,"contract.wage",31,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_PRO_PRE_ASI","Production Premium","PRO_PRE_ASI","TRUE","Subsidy","Employee","Python Code","Python Expression","Production Premium Assistance",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","inputs.PRO_PRE_ASI","Payroll",1,"contract.wage",33,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_SEC_ASI","Secondary Educational Aid","SEC_ASI","TRUE","Aid","Employee","Python Code","Python Expression","Secondary Educational Assistance",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
total = inputs.SEC_ASI.amount if inputs.SEC_ASI and  inputs.SEC_ASI.amount > 0 else 0
result = total","Payroll",1,"contract.wage",31,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_SPE_ASI","Special Educational Aid","SPE_ASI","TRUE","Aid","Employee","Python Code","Python Expression","Special Educational Assistance",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
total = inputs.SPE_ASI.amount if inputs.SPE_ASI and  inputs.SPE_ASI.amount > 0 else 0
result = total","Payroll",1,"contract.wage",31,"account.3_co_puc_250505","account.3_co_puc_510545"
"l10n_co_hr_payroll.hr_salary_rule_TEC_ASI","Technical Educational Aid","TEC_ASI","TRUE","Aid","Employee","Python Code","Python Expression","Tecnical Educational Assistance",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
total = inputs.TEC_ASI.amount if inputs.TEC_ASI and  inputs.TEC_ASI.amount > 0 else 0
result = total","Payroll",1,"contract.wage",31,"account.3_co_puc_250505","account.3_co_puc_510521"
"l10n_co_hr_payroll.hr_salary_rule_UNI_ASI","University Educational Aid","UNI_ASI","TRUE","Aid","Employee","Python Code","Python Expression","University Educational Assistance",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
total = inputs.ADV_DIS.amount if inputs.ADV_DIS and  inputs.ADV_DIS.amount > 0 else 0
result = total","Payroll",1,"contract.wage",31,"account.3_co_puc_250505","account.3_co_puc_510548"
"l10n_co_hr_payroll.hr_salary_rule_VIA","Viatics","VIA","TRUE","Income","Employee","Python Code","Python Expression","Viatics",0,0,0,0,,"result = inputs.VIA.amount","inputs.VIA","Payroll",1,"contract.wage",31,,
"l10n_co_hr_payroll.hr_salary_rule_TOT_AUX","Total Assistance","TOT_AUX","TRUE","Total","Employee","Python Code","Python Expression","Total Assistance",0,0,0,0,,"result = categories.AUX","categories.AUX","Payroll",1,"contract.wage",39,"account.3_co_puc_250505","account.3_co_puc_510530"
"l10n_co_hr_payroll.hr_salary_rule_AFC","AFC","AFC","TRUE","Other Payments","AFC","Python Code","Python Expression","Unemployment Payment",0,0,0,0,,"result_qty = 1
result_rate = inputs.AFC.amount * 100 if inputs.AFC.amount > 0 and inputs.AFC.amount < 1 else 100
result = categories.INC if inputs.AFC.amount > 0 and inputs.AFC.amount < 0 else inputs.AFC.amount","inputs.AFC","Payroll",1,"contract.wage",41,"account.3_co_puc_250505","account.3_co_puc_510536"
"l10n_co_hr_payroll.hr_salary_rule_AFC_INT","AFC Interest","AFC_INT","TRUE","Other Payments","Employee","Python Code","Python Expression","Unemployemnt Interest Payment",0,0,0,0,,"
result_qty = 1
result_rate = inputs.AFC_INT.amount * 100 if inputs.AFC_INT.amount > 0 and inputs.AFC_INT.amount < 1 else 100
result = categories.INC if inputs.AFC_INT.amount > 0 and inputs.AFC_INT.amount < 0 else inputs.AFC_INT.amount","total = 0
total = inputs.AFC_INT.amount if inputs.AFC_INT and  inputs.AFC_INT.amount > 0 else 0
result = total","Payroll",1,"contract.wage",41,"account.3_co_puc_250505","account.3_co_puc_510533"
"l10n_co_hr_payroll.hr_salary_rule_PRM","Service Premiun","PRM","TRUE","Other Payments","Employee","Python Code","Python Expression","Service Premiun",0,0,0,8.33,"categories.INC + categories.OTH_INC","result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 50
result = categories.INC * total if total > -1 and total < 1 else total","total = 0
date_end = strptime('2019-01-01', '%Y-%m-%d')
date_end = payslip.date_to
end_month = int(date_end.month)
total = inputs.PRM if inputs.PRM else LST_SIX_AVG_INC if end_month in (6,12) else 0
result = total if total > 0 else 0","Payroll",1,"contract.wage",41,,
"l10n_co_hr_payroll.hr_salary_rule_VAC_MON","Vacation In Money","VAC_MON","TRUE","Other Payments","Employee","Python Code","Python Expression","Vacation In Money",0,0,0,100,"IBC_SS","result = inputs.VAC_MON.amount","inputs.VAC_MON","Payroll","30/inputs.VAC_MON","contract.wage",41,,
"l10n_co_hr_payroll.hr_salary_rule_IBC_SS","IBC Social Security","IBC_SS","TRUE","Quotation Base Index","Employee","Python Code","Always True","Quotation Base Index Social Security",0,0,0,0,,"result = SMMLV * DAYS if categories.INC < SMMLV * DAYS else  categories.INC * (0.7 if contract.integral else 1)","
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10","Payroll",1,"contract.wage",51,,
"l10n_co_hr_payroll.hr_salary_rule_LST_AVG_INC","Last Average Income","LST_AVG_INC","FALSE","Quotation Base Index","Employee","Python Code","Always True","Last Average Income",0,0,0,0,,"
result, total, i = categories.INC, 0, 0
date_end = strptime('2019-01-01', '%Y-%m-%d')
date_end = payslip.date_from - relativedelta(days=int(payslip.date_from.day))
date_start = date_end - relativedelta(days=int(date_end.day))
date_start = date_start + relativedelta(days= 1)
for slip in contract.payslip_ids.filtered(lambda x: x.date_from >= date_start and x.date_from <=  date_end):
  for income in slip.line_ids.filtered(lambda x: x.code == ('TOT_INC')):
    total += income.amount
result_qty=1
result_rate = 100
result=total","
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10","Payroll",1,"contract.wage",40,"account.3_co_puc_250505","account.3_co_puc_510539"
"l10n_co_hr_payroll.hr_salary_rule_LST_ONE_AVG_INC","Last One Average Income","LST_ONE_AVG_INC","FALSE","Quotation Base Index","Employee","Python Code","Always True","Last One Average Income",0,0,0,0,,"result, total, i = categories.INC, 0, 0
date_end = strptime('2019-01-01', '%Y-%m-%d')
date_end = payslip.date_from - relativedelta(days=int(payslip.date_from.day))
date_start = date_end - relativedelta(days=int(date_end.day))
date_start = date_start + relativedelta(days= 1)
for slip in contract.payslip_ids.filtered(lambda x: x.date_from >= date_start and x.date_from <= date_end):
  for income in slip.line_ids.filtered(lambda x: x.code == ('TOT_INC')):
    total += income.amount
result_qty = 1
result_rate = 100
result=total","
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10","Payroll",1,"contract.wage",40,,
"l10n_co_hr_payroll.hr_salary_rule_LST_SIX_AVG_INC","Last Six Average Income","LST_SIX_AVG_INC","FALSE","Quotation Base Index","Employee","Python Code","Always True","Last Six Average Income",0,0,0,0,,"result, total, i, j = categories.INC, 0, 0, 0
date_end = strptime('2019-01-01', '%Y-%m-%d')
date_end = payslip.date_to
date_start = payslip.date_to - relativedelta(days=int(payslip.date_to.day))
date_start = date_start + relativedelta(days=1)
end_month = int(date_start.month)
nro_months = end_month  if end_month < 7 else end_month - 6
if nro_months > 0:
  date_start = date_start - relativedelta(months=nro_months-1)
  date_initial = strptime('2019-01-01', '%Y-%m-%d')
  date_initial = contract.date_start
  if date_initial > date_start:
    j += 1
    month_initial = int(date_initial.month)
    delta_initial = month_initial if month_initial < 7 else month_initial - 6
    nro_months = nro_months + 1 - delta_initial
    date_start = date_start + relativedelta(months=month_initial - 1)
  for slip in contract.payslip_ids.filtered(lambda x: x.date_from >= date_start and x.date_from <= payslip.date_to + relativedelta(days=0)):
    i += 1
    for income in slip.line_ids.filtered(lambda x: x.code == ('TOT_INC')):
      total += income.amount
  total += TOT_INC + TRA_ASI
  porc =   date_end.day if date_end.day < 28 else 30
  nro_months = nro_months - ((30 - porc) / 30)
  total = total
result_qty = 1
result_rate = 100 / nro_months
result=total","date_end = strptime('2019-01-01', '%Y-%m-%d')
date_end = payslip.date_to
end_month = int(date_end.month)
result = True if end_month in (6, 12) else False","Payroll",1,"contract.wage",40,,
"l10n_co_hr_payroll.hr_salary_rule_LST_TWE_AVG_INC","List Twelve Average Income","LST_TWE_AVG_INC","FALSE","Quotation Base Index","Employee","Python Code","Always True","List Twelve Average Income",0,0,0,0,,"result, total, I = categories.INC, 0, 0
date_end = strptime('2019-01-01', '%Y-%m-%d')
date_end = payslip.date_to
date_start = payslip.date_to - relativedelta(days=int(payslip.date_to.day))
date_start = date_start + relativedelta(days=1)
end_month = int(date_start.month)
nro_months = end_month
if nro_months > 0:
  date_start = date_start - relativedelta(months=nro_months-1)
  date_initial = strptime('2019-01-01', '%Y-%m-%d')
  date_initial = contract.date_start
  if date_initial > date_start:
    month_initial = int(date_initial.month)
    delta_initial = month_initial
    nro_months = nro_months + 1 - delta_initial
    date_start = date_start + relativedelta(months=month_initial - 1)
  for slip in contract.payslip_ids.filtered(lambda x: x.date_from >= date_start and x.date_from <= date_end):
    for income in slip.line_ids.filtered(lambda x: x.code == ('TOT_INC')):
      total += income.amount
  total += TOT_INC + TRA_ASI
  porc =   date_end.day if date_end.day < 28 else 30
  nro_months = nro_months - ((30 - porc) / 30)
  total = total
result_qty = 1
result_rate=100 / nro_months
result=total","date_end = strptime('2019-01-01', '%Y-%m-%d')
date_end = payslip.date_to
end_month = int(date_end.month)
result = True if end_month == 12 else False","Payroll",1,"contract.wage",40,,
"l10n_co_hr_payroll.hr_salary_rule_EPS","Health Contribution","EPS","TRUE","Deduction","EPS","Percentage (%)","Always True","Health Contribution",0,0,0,4,"IBC_SS"," # Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10","
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10","Payroll",1,"contract.wage",61,,
"l10n_co_hr_payroll.hr_salary_rule_GROSS","Gross","GROSS","TRUE","Gross",,"Python Code","Always True","GROSS",0,0,0,0,,"result = categories.INC + categories.OTH_INC + categories.AUX + categories.OTH_PAY","total = 0
total = categories.OTH_INC","Payroll",1,"contract.wage",49,,
"l10n_co_hr_payroll.hr_salary_rule_AFP","Pension Contribution","AFP","TRUE","Deduction","AFP","Percentage (%)","Python Expression","Pension Contribution",0,0,0,4,"IBC_SS"," # Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10","total = 0 
total = 0 if contract.pensioner else 1
result = total","Payroll",1,"contract.wage",61,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_FSP","Pension Solidarity Fund","FSP","TRUE","Deduction","AFP","Percentage (%)","Python Expression","Pension Solidarity Fund",0,0,0,1,"IBC_SS"," # Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10","total = 0
Total = 1 if IBC_SS / SMMLV > 3.99 * DAYS else 0
result = total","Payroll",1,"contract.wage",61,"account.3_co_puc_237005","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_RET_FTE","Source Retention","RET_FTE","TRUE","Deduction","TAX","Python Code","Python Expression","Source Retention",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'RET_FTE'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.RET_FTE.amount if inputs.RET_FTE and inputs.RET_FTE.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",61,"account.3_co_puc_236505","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_IBC_SA","IBC Source Withholding","IBC_RET","FALSE","Quotation Base Index","Employee","Python Code","Python Expression","Quotation Base Index Social Allowance",0,0,0,0,,"result = total
","total, afp, eps = 0, 0, 0
total = categories.INC + categories.OTH_INC - categories.DED
result = total if total != 0 else 0","Payroll",1,"contract.wage",62,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_IBC_RET","IBC Source Withholding","IBC_RET","TRUE","Quotation Base Index","Employee","Python Code","Always True","Quotation Base Index Social Allowance",0,0,0,0,,"result = total","ibc = IBC_SS
result = ibc > (4 * SMMLV)","Payroll",1,"contract.wage",62,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_VOL_DED","Volunteer Deduction","VOL_DED","FALSE","Quotation Base Index",,"Python Code","Python Expression","Volunteer Deduction",0,0,0,0,,"result_qty=1
result_rate=100
limit =  UVT * 316.66 if UVT * 316.66 < categories.INC * 0.3 else categories.INC * 0.3
result= limit if total > limit else total","total = 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'VOL_DED'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
","Payroll",1,"contract.wage",62,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_AFP_VOL","AFP Volunteer","AFP_VOL","TRUE","Deduction","AFP","Python Code","Python Expression","Retirement Volunteer Contribution",0,0,0,0,,"result_qty=1  result_rate=100  result= total","inputs.AFP_VOL","Payroll",1,"contract.wage",63,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_SRC_RET_VAL","Source Retention Value","SRC_RET_VAL","FALSE","Quotation Base Index",,"Python Code","Python Expression","Source Retention Value",0,0,0,0,,"result_qty=1
rat = 0
grad = 0
uvts = total / uvt
if uvts > 95 and uvts <=150:
  rat = 0.19
  grad = 0
elif uvts > 150 and uvts <= 360:
  rat = 0.28
  grad = 10
elif uvts > 360:
  rat = 0.33
  grad = 28
result_rate=100
result = total * rat + grad * uvt","total, uvt = categories.INC, 0
uvt = UVT
result = uvt and total > 128.96*uvt","Payroll",1,"contract.wage",64,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_FUN_INS","Funeral Insurance","FUN_INS","TRUE","Deduction","INS","Python Code","Python Expression","Funeral Insurance",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'FUN_INS'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.FUN_INS.amount if inputs.FUN_INS and inputs.FUN_INS.amount else total
result = total if total != 0 else 0","Payroll",,,65,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_INS_LOA","Institutional Loan","INS_LOA","TRUE","Deduction","LOA","Python Code","Python Expression","Institutional Loan",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'INS_LOA'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.INS_LOA.amount if inputs.INS_LOA and inputs.INS_LOA.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",65,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_INS","Insurance","INS","TRUE","Deduction","INS","Python Code","Python Expression","Insurance",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'INS'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.INS.amount if inputs.INS and inputs.INS.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",65,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_LAB_LOA","Labor Loan","LAB_LOA","TRUE","Deduction","LOA","Python Code","Python Expression","Labor Loan",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'LAB_LOA'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.LAB_LOA.amount if inputs.LAB_LOA and inputs.LAB_LOA.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",65,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_LOA","Loan","LOA","TRUE","Deduction","LOA","Python Code","Python Expression","Loan",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'LOA'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.LOA.amount if inputs.LOA and inputs.LOA.amount else total
result = total if total != 0 else 0","Payroll",,,65,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_OTH_INS","Other Insurance","OTH_INS","TRUE","Deduction","INS","Python Code","Python Expression","Other Insurance",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","otal = 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'OTH_INS'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.OTH_INS.amount if inputs.OTH_INS and inputs.OTH_INS.amount else total
result = total if total != 0 else 0","Payroll",,,65,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_CAL_LOA","Calamity Loan","CAL_LOA","TRUE","Deduction","LOA","Python Code","Python Expression","Calamity Loan",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'CAL_LOA'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.CAL_LOA.amount if inputs.CAL_LOA and inputs.CAL_LOA.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",71,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_CAR_LOA","Car Loan","CAR_LOA","TRUE","Deduction","LOA","Python Code","Python Expression","Car Loan",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'CAR_LOA'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.CAR_LOA.amount if inputs.CAR_LOA and inputs.CAR_LOA.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",71,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_CTY_UNI","City Union","CTY_UNI","TRUE","Deduction","UNI","Python Code","Python Expression","City Union",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","result, total = categories.INC, 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'CTY_UNI'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.CTY_UNI.amount if inputs.CTY_UNI and inputs.CTY_UNI.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",71,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_COO","Cooperative","COO","TRUE","Deduction","COO","Python Code","Python Expression","Cooperative",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","result, total = categories.INC, 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'COO'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.COO.amount if inputs.COO and inputs.COO.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",71,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_EDU_LOA","Educational Loan","EDU_LOA","TRUE","Deduction","LOA","Python Code","Python Expression","Educational Loan",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","result, total = categories.INC, 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'EDU_LOA'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.EDU_LOA.amount if inputs.EDU_LOA and inputs.EDU_LOA.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",71,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_FON","Employee Association","FON","TRUE","Deduction","FON","Python Code","Python Expression","Employee Association",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","result, total = categories.INC, 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'FON'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.FON.amount if inputs.FON and inputs.FON.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",71,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_EXE_JUD","Execut Judicial","EXE_JUD","TRUE","Deduction","JUD","Python Code","Python Expression","Execut Judicial",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","result, total = categories.INC, 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'EXE_JUD'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.EXE_JUD.amount if inputs.EXE_JUD and inputs.EXE_JUD.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",71,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_FEE_JUD","Feed Judicial","FEE_JUD","TRUE","Deduction","JUD","Python Code","Python Expression","Feed Judicial",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","result, total = categories.INC, 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'FEE_JUD'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.FEE_JUD.amount if inputs.FEE_JUD and inputs.FEE_JUD.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",71,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_HOU_LOA","Housing Loan","HOU_LOA","TRUE","Deduction","LOA","Python Code","Python Expression","Housing Loan",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'HOU_LOA'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.HOU_LOA.amount if inputs.HOU_LOA and inputs.HOU_LOA.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",71,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_IND_UNI","Industry Union","IND_UNI","TRUE","Deduction","UNI","Python Code","Python Expression","Industry Union",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","result, total = categories.INC, 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'IND_UNI'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.IND_UNI.amount if inputs.IND_UNI and inputs.IND_UNI.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",71,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_MED_LOA","Medical Loan","MED_LOA","TRUE","Deduction","LOA","Python Code","Python Expression","Medical Loan",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'MED_LOA'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.MED_LOA.amount if inputs.MED_LOA and inputs.MED_LOA.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",71,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_OTH_ASO","Other Association","OTH_ASO","TRUE","Deduction","OTH","Python Code","Python Expression","Other Association",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","result, total = categories.INC, 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'OTH_ASO'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.OTH_ASO.amount if inputs.OTH_ASO and inputs.OTH_ASO.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",71,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_OTH_DIS","Other Discount","OTH_DIS","TRUE","Discount","OTH","Python Code","Python Expression","Other Discount",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
total = inputs.OTH_DIS.amount if inputs.OTH_DIS and  inputs.OTH_DIS.amount > 0 else 0
result = total","Payroll",1,"contract.wage",73,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_OTH_JUD","Other Judicial","OTH_JUD","TRUE","Deduction","OTH","Python Code","Python Expression","Other Judicial",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","result, total = categories.INC, 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'OTH_JUD'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.OTH_JUD.amount if inputs.OTH_JUD and inputs.OTH_JUD.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",71,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_OTH_LOA","Other Loan","OTH_LOA","TRUE","Deduction","OTH","Python Code","Python Expression","Other Loan",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'OTH_LOA'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.OTH_LOA.amount if inputs.OTH_LOA and inputs.OTH_LOA.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",71,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_OTH_UNI","Other Union","OTH_UNI","TRUE","Deduction","OTH","Python Code","Python Expression","Other Union",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","result, total = categories.INC, 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'OTH_UNI'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.OTH_UNI.amount if inputs.OTH_UNI and inputs.OTH_UNI.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",71,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_POS_CON_LOA","POS Consume Loan","POS_CON_LOA","TRUE","Discount","LOA","Python Code","Python Expression","POS Consume Loan",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'POS_CON_LOA'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.POS_CON_LOA.amount if inputs.POS_CON_LOA and inputs.POS_CON_LOA.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",71,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_REC_LOA","Recreation Loan","REC_LOA","TRUE","Deduction","LOA","Python Code","Python Expression","Recreation Loan",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'REC_LOA'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.REC_LOA.amount if inputs.REC_LOA and inputs.REC_LOA.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",71,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_REG_UNI","Region Union","REG_UNI","TRUE","Deduction","UNI","Python Code","Python Expression","Region Union",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","result, total = categories.INC, 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'REG_UNI'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.REG_UNI.amount if inputs.REG_UNI and inputs.REG_UNI.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",71,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_SEC_UNI","Sector Union","SEC_UNI","TRUE","Deduction","UNI","Python Code","Python Expression","Sector Union",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","result, total = categories.INC, 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'SEC_UNI'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.SEC_UNI.amount if inputs.SEC_UNI and inputs.SEC_UNI.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",71,"account.3_co_puc_237095","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_SUB_UNI","Subsector Union","SUB_UNI","TRUE","Deduction","UNI","Python Code","Python Expression","Subsector Union",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","result, total = categories.INC, 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'SUB_UNI'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.SUB_UNI.amount if inputs.SUB_UNI and inputs.SUB_UNI.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",71,,
"l10n_co_hr_payroll.hr_salary_rule_VAR_LOA","Variety Loan","VAR_LOA","TRUE","Deduction","LOA","Python Code","Python Expression","Variety Loan",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'VAR_LOA'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
total = inputs.VAR_LOA.amount if inputs.VAR_LOA and inputs.VAR_LOA.amount else total
result = total if total != 0 else 0","Payroll",1,"contract.wage",71,,
"l10n_co_hr_payroll.hr_salary_rule_TOT_DED","Total Deductions","TOT_DED","TRUE","Total","Employee","Python Code","Python Expression","Total Deductions",0,0,0,0,,"result_rate = total * 100 if total >= -1 and total <= 1 else 100","result = categories.DED","Payroll",1,"contract.wage",66,,
"l10n_co_hr_payroll.hr_salary_rule_ADV_DIS","Advance Payment","ADV_DIS","TRUE","Discount","Employee","Python Code","Python Expression","1st Biweekly Advance Payment",0,0,0,0,,"
result_qty = 1
result_rate = total * 100 if total > -1 and total < 1 else 100
result = categories.INC if total > -1 and total < 1 else total * DAYS","total = 0
total = inputs.ADV_DIS.amount if inputs.ADV_DIS and  inputs.ADV_DIS.amount > 0 else 0
result = total","Payroll",1,"contract.wage",73,"account.3_co_puc_237095","account.3_co_puc_510569"
"l10n_co_hr_payroll.hr_salary_rule_TOT_DIS","Total Discounts","TOT_DIS","TRUE","Total","Employee","Python Code","Python Expression","Total Discounts",0,0,0,0,,"result = categories.DIS","result = categories.DIS","Payroll",1,"contract.wage",78,"account.3_co_puc_237095","account.3_co_puc_510570"
"l10n_co_hr_payroll.hr_salary_rule_TOT_PAY","TOTAL TO PAY","TOT_PAY","TRUE","Total","Employee","Python Code","Always True","TOTAL TO PAY",0,0,0,0,,"result = categories.INC + categories.OTH_INC + categories.AUX + categories.OTH_PAY - categories.DED - categories.DIS","
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10","Payroll",1,"contract.wage",79,,
"l10n_co_hr_payroll.hr_salary_rule_EPS_PAT","Employer Health Contribution","EPS_PAT","TRUE","Contribution","Employee","Percentage (%)","Python Expression","Employer Health Contribution",0,0,0,8.5,"IBC_SS"," # Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10","result = IBC_SS and not payslip.company_id_partner_id.retention","Payroll",1,"contract.wage",81,,
"l10n_co_hr_payroll.hr_salary_rule_AFP_PAT","Employer Pension Contribution","AFP_PAT","TRUE","Contribution","Employee","Percentage (%)","Python Expression","Employer Pension Contribution",0,0,0,12.5,"IBC_SS"," # Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10","total = 0 
total = 1 if not contract.pensioner else 0
result = total","Payroll",1,"contract.wage",81,,
"l10n_co_hr_payroll.hr_salary_rule_AFC_DED","AFC Deduction","AFC_DED","FALSE","Quotation Base Index","Employee","Python Code","Python Expression","AFC Deduction",0,0,0,0,,"result=total
result_rate=100
result_qty=1","result, total = categories.INC, 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'AFC'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
","Payroll",1,"contract.wage",83,,
"l10n_co_hr_payroll.hr_salary_rule_AFP_DED","AFP Deduction","AFP_DED","FALSE","Quotation Base Index","Employee","Python Code","Python Expression","AFP Deduction",0,0,0,0,,"result_qty=1
result_rate=100
result= total","result, total = categories.INC, 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'AFP'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
","Payroll",1,"contract.wage",83,,
"l10n_co_hr_payroll.hr_salary_rule_DEP_DED","Dependant Deduction","DEP_DED","FALSE","Quotation Base Index","Employee","Python Code","Python Expression","Dependant Deduction",0,0,0,0,,"result_qty=1
result_rate=100
limit =  UVT * 32 if UVT * 32 < categories.INC * 0.1 else categories.INC * 0.1
result= limit if total > limit else total","result, total = categories.INC, 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'DEP'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0

","Payroll",1,"contract.wage",83,,
"l10n_co_hr_payroll.hr_salary_rule_HOU_DED","Interest Deduction","HOU_DED","FALSE","Quotation Base Index","Employee","Python Code","Python Expression","Interest Deduction",0,0,0,0,,"result_qty=1
result_rate=100
result= UVT * 100 if total > UVT * 100 else total","result, total = categories.INC, 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'HOU'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
","Payroll",1,"contract.wage",83,,
"l10n_co_hr_payroll.hr_salary_rule_MED_DED","Medical Deduction","MED_DED","FALSE","Quotation Base Index","Employee","Python Code","Python Expression","Medical Deduction",0,0,0,0,,"result_qty=1
result_rate=100
result= UVT * 16 if total > UVT * 16 else total","result, total = categories.INC, 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'MED'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
","Payroll",1,"contract.wage",83,,
"l10n_co_hr_payroll.hr_salary_rule_OTH_DED","Other Deduction","OTH_DED","FALSE","Quotation Base Index","Employee","Python Code","Python Expression","Other Excempt Incomes",0,0,0,0,,"result_qty=1
result_rate=100
result= total","result, total = categories.INC, 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'HOU'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
","Payroll",1,"contract.wage",83,,
"l10n_co_hr_payroll.hr_salary_rule_OTH_EXC","Other Excempt Incomes","OTH_EXC","FALSE","Quotation Base Index","Employee","Python Code","Python Expression","Other Excempt Incomes",0,0,0,0,,"result_qty=1
result_rate=100
result= total ","result, total = categories.INC, 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'OTH_EXC'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
","Payroll",1,"contract.wage",83,,
"l10n_co_hr_payroll.hr_salary_rule_KND","Payment In Kind","KND-DED","FALSE","Quotation Base Index","Employee","Python Code","Python Expression","Payment In Kind",0,0,0,0,,"result_qty=1
result_rate=100
limit =  UVT * 41 if UVT * 41 < categories.INC * 1 else categories.INC * 1
result= limit if total > limit else total","result, total = categories.INC, 0
for input in contract.inputs_ids.filtered(lambda x: x.type.code == 'KND'):
 total = input.amount if (not input.date_from or (input.date_from and payslip.date_from >= input.date_from)) and (not input.date_to or (input.date_to and input.date_to >= payslip.date_to)) else 0
","Payroll",1,"contract.wage",83,"account.3_co_puc_236505","account.3_co_puc_250505"
"l10n_co_hr_payroll.hr_salary_rule_BAS_RET","Base Retention","BAS_RET","FALSE","Quotation Base Index","Employee","Python Code","Python Expression","Base Retention",0,0,0,0,,"result_rate=100
incr =  (categories['INC'] - categories['DED']) * 30 / worked_days['WORK100'].number_of_days
ded = inputs['HOU_DED'].amount if 'HOU_DED' in inputs else 0 + inputs['DEP_DED'].amount if 'DEP_DED' in inputs else 0 + inputs['MED_DED'].amount if 'MED_DED' in inputs else 0 
af = inputs['SUB'].amount if 'SUB' in inputs else 0 + inputs['AFC_DED'].amount if 'AFC' in inputs else 0
oth = inputs['OTH_EXC'].amount if 'OTH_EXC' in inputs else 0 + inputs['OTH_DED'].amount if 'OTH_DED' in inputs else 0
dis = (incr - ded - af - oth) * 0.25
result = incr * 0.60 if (ded + af + oth + dis) > incr * 0.4 else incr - (ded + af + oth + dis)","ibc = IBC_SS
result = ibc > (4 * SMMLV)","Payroll",1,"contract.wage",84,"account.3_co_puc_237006","account.3_co_puc_510568"
"l10n_co_hr_payroll.hr_salary_rule_ICBF","Colombian Familiar Wellness Institute","ICBF","TRUE","Contribution","ICBF","Percentage (%)","Python Expression","Colombian Familiar Wellness Institute",0,0,0,3,"IBC_SS"," # Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10","result = IBC_SS and not payslip.company_id_partner_id.retention","Payroll",1,"contract.wage",85,"account.3_co_puc_237010","account.3_co_puc_510572"
"l10n_co_hr_payroll.hr_salary_rule_CCF","Familiar Compensation Cash","CCF","TRUE","Contribution","CCF","Percentage (%)","Always True","Familiar Compensation Cash",0,0,0,4,"IBC_SS"," # Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10","
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = rules.NET > categories.NET * 0.10","Payroll",1,"contract.wage",85,"account.3_co_puc_237010","account.3_co_puc_510575"
"l10n_co_hr_payroll.hr_salary_rule_SENA","Learning National Service","SENA","TRUE","Contribution","SENA","Percentage (%)","Python Expression","Learning National Service",0,0,0,2,"IBC_SS"," # Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = contract.wage * 0.10","result = IBC_SS and not payslip.company_id_partner_id.retention","Payroll",1,"contract.wage",85,"account.3_co_puc_237010","account.3_co_puc_510578"
"l10n_co_hr_payroll.hr_salary_rule_ARL","Professional Risk","ARL","TRUE","Contribution","ARL","Python Code","Always True","Professional Risk",0,0,0,0,,"factor = payslip.employee_id.job_id.arl_class if payslip.employee_id.job_id.arl_class else payslip.employee_id.department_id.arl_class if payslip.employee_id.department_id.arl_class else payslip._rule_parameter('ARL') if payslip._rule_parameter('ARL') else '1'
categoria = 1.044 if factor == '2' else 2.436 if factor == '3' else 4.350 if factor == '4' else 6.960 if factor == 5 else 0.522
result_qty = 1
result_rate = categoria
result = IBC_SS","inputs.ARL","Payroll",1,"contract.wage",85,,
"l10n_co_hr_payroll.hr_salary_rule_TOT_CON","Total Contributions","TOT_CON","TRUE","Total","Employee","Python Code","Always True","Total Contributions",0,0,0,0,,"result = categories.CON","categories.CON","Payroll",1,"contract.wage",89,"account.3_co_puc_281095","account.3_co_puc_510536"
"l10n_co_hr_payroll.hr_salary_rule_AFC_ACR","AFC Accrued","AFC_ACR","TRUE","Accrued","Employee","Percentage (%)","Python Expression","AFC Accrued",0,0,0,8.33,"categories.INC + categories.OTH_INC","Total = 0 if contract.integral else 1","Total = 0
total += 1 if not contract.integral else 0
result = total","Payroll",1,"contract.wage",91,"account.3_co_puc_281095","account.3_co_puc_510530"
"l10n_co_hr_payroll.hr_salary_rule_AFC_INT_ACR","AFC Interest Accrued","AFC_INT_ACR","TRUE","Accrued","Employee","Percentage (%)","Python Expression","AFC Interest Accrued",0,0,0,12,"AFC_ACR","Total = 0 if contract.integral else 1","Total = 0
total += 1 if not contract.integral else 0
result = total","Payroll",1,"contract.wage",91,"account.3_co_puc_281095","account.3_co_puc_510533"
"l10n_co_hr_payroll.hr_salary_rule_PRM_ACR","Premium Accrued","PRM_ACR","TRUE","Accrued","Employee","Percentage (%)","Python Expression","Premium Accrued",0,0,0,8.33,"categories.INC + categories.OTH_INC","Total = 0
total += 1 if not contract.pensioner else 0
result = total","Total = 0
total += 1 if not contract.integral else 0
result = total","Payroll",1,"contract.wage",91,"account.3_co_puc_281095","account.3_co_puc_510539"
"l10n_co_hr_payroll.hr_salary_rule_VAC_ACR","Vacations Accrued","VAC_ACR","TRUE","Accrued","Employee","Python Code","Python Expression","Vacations Accrued",0,0,0,0,,"result_qty = 1
result_rate = 125
result = round(BASIC / total,5)","total = 0
for days in payslip.worked_days_line_ids.filtered(lambda x: x.number_of_days > 0):
 total += days.number_of_days
result = total","Payroll",1,"contract.wage",91,,
"l10n_co_hr_payroll.hr_salary_rule_TOT_ACR","Total Accrue","TOT_ACR","TRUE","Total","Employee","Python Code","Always True","Total Accrue",0,0,0,0,,"result = categories.ACR","categories.CON","Payroll",1,"contract.wage",99,,
"l10n_co_hr_payroll.hr_salary_rule_EPS_INA_180_COL","EPS Inability > 180 Days Collect","EPS_INA_180_COL","TRUE","Collection","EPS","Python Code","Python Expression","EPS Inability > 180 Days Collect",0,0,0,0,,"
result_qty = worked_days.EPS_INA_180.number_of_days
result_rate = ( contract.wage * 0.5 > SMMLV) and  50.00  or  ( 100 - (100 * contract.wage / SMMLV))
result = contract.wage /30","worked_days.EPS_INA_180","Payroll",1,"contract.wage",101,"account.3_co_puc_250505","account.3_co_puc_510595"
"l10n_co_hr_payroll.hr_salary_rule_EPS_INA_COL","EPS Inability Collect","EPS_INA_COL","TRUE","Collection","EPS","Python Code","Python Expression","EPS Inability Collect",0,0,0,0,,"result_qty = worked_days.EPS_INA.number_of_days
result_rate = (contract.wage * 0.6667 > SMMLV) and  66.67  or  (100 * contract.wage / SMMLV)
result = contract.wage /30","worked_days.EPS_INA ","Payroll",1,"contract.wage",101,"account.3_co_puc_250505","account.3_co_puc_510595"
"l10n_co_hr_payroll.hr_salary_rule_NET","Net","NET","TRUE","Net",,"Python Code","Always True","NET",0,0,0,0,,"result = GROSS + categories.CON + categories.ACR","total = 0
total = categories.OTH_INC","Payroll",1,"contract.wage",100,,
